# Welcome to the Totem Live Accounting wiki!

In this Wiki we will try to expand upon concepts in the various modules of Totem, and explain the vision as we see it, and how that relates to what we are building.

> Totem Live Accounting is a peer-to-peer real-time accounting ledger designed for the gig economy. 

What that means in practice is that accounting entries are posted directly into all relevant party's accounts as soon as they are created in your own accounts. Because anyone &        Ã©anywhere can do this at anytime, it gracefully matches what is happening in the gig-economy where work is becoming increasing reliant on peer-to-peer interactions.

With traditional accounting systems this is impossible unless all parties are subscribed to the same software - but that rarely happens, and there are many risks and issues associated with doing this especially as you do not controll your data. 

Totem innovates this because the protocol which we are building allows companies to do this securely, privately and without having to rely on a software vendor.

Alongside the protocol, we are also building a UI so that users can basically use the Totem protocol without having to build an interface themselves - although you could if you wanted to.

The purpose of this Wiki is to explain our UI, and how it relates to the concepts in the protocol in detail.

## Modules

In broad terms "a module" in Totem is an item that can be found in the navigation bar of the UI. It usually has two primary components: the front-end user interface (Totem UI) and the back-end blockchain (Totem Network).

### Pages of the Wiki

Each page will basically outline the functionalities of each Module as you see it in the UI, and as it functions in the blockchain.

### Other supporting services in each module

There are additional supporting components which allow your data to be stored locally on your device, and this in turn is supported by a remote service which syncronises your data with your device and the blockchain. 

In the UI itself there is a queuing mechanism that helps with sending transactions and synconisation.

All these services will be explained here too. 

## Contribution

We welcome anyone who wishes to contribute to this wiki!